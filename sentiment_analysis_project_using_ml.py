# -*- coding: utf-8 -*-
"""sentiment analysis project using ml.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10RtxtmrI8S-YHLex69juG_BFy4yVoxWB
"""

import pandas as pd
df=pd.read_csv('sentiment.csv')
df

import re #regular expression
import nltk
import pandas as pd
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer

nltk.download('stopwords')
nltk.download('wordnet') #database of english

lemmatizer = WordNetLemmatizer()
stop_words = set(stopwords.words('english'))

df = pd.read_csv('sentiment.csv')

def clean_text(text):
    text = text.lower()  # Convert to lowercase
    text = re.sub(r'[^\w\s]', '', text)  # Remove punctuation
    text = re.sub(r'https?:\\/S+','', text)
    text = re.sub(r'\d+', '', text)  # Remove numbers
    text = ' '.join(word for word in text.split() if word not in stop_words)  # Remove stopwords
    text = ' '.join(lemmatizer.lemmatize(word) for word in text.split())  # Lemmatize
    return text

df['cleaned_review'] = df['text'].apply(clean_text)

print(df)

from sklearn.feature_extraction.text import CountVectorizer

from sklearn.naive_bayes import BernoulliNB, MultinomialNB

vectorizer1 = CountVectorizer(binary=False)
vectorizer2 = CountVectorizer(binary=True)

X1=vectorizer1.fit_transform(df.text)
X2=vectorizer2.fit_transform(df.text)

y=df.sentiment

from sklearn.model_selection import train_test_split

xtrain1,xtest1,ytrain,ytest = train_test_split(X1,y,test_size=0.25, random_state=1)
xtrain2,xtest2,ytrain,ytest = train_test_split(X2,y,test_size=0.25, random_state=1)

mnb = MultinomialNB()
bnb = BernoulliNB()

bnb.fit(xtrain1, ytrain)

mnb.fit(xtrain2, ytrain)

y_pred1 = bnb.predict(xtest1)

y_pred2 = mnb.predict(xtest2)

from sklearn.metrics import confusion_matrix, accuracy_score

accuracy_score(ytest, y_pred1)

accuracy_score(ytest, y_pred2)

from sklearn.feature_extraction.text import TfidfVectorizer

vectorizer3 = TfidfVectorizer()

X3=vectorizer3.fit_transform(df.text)

xtrain3,xtest3,ytrain,ytest = train_test_split(X3,y,test_size=0.25, random_state=1)

#tfidf = TfidfVectorizer()

vectorizer3 = TfidfVectorizer(binary = False)

X3 = vectorizer3.fit_transform(df.text)

#xtrain3,xtest3,ytrain,ytest = train_test_split(X3,y,test_size=0.25, random_state=1)

#tfidf.fit(xtrain3, ytrain)

mnb.fit(xtrain3, ytrain)

ypred3=mnb.predict(xtest3)

accuracy_score(ytest,ypred3)

user_input = input("Enter a sentence for sentiment prediction: ")


user_input_transformed1 = vectorizer1.transform([user_input])
user_input_transformed2 = vectorizer2.transform([user_input])
user_input_transformed3 = vectorizer3.transform([user_input])


user_pred1 = bnb.predict(user_input_transformed1)
user_pred2 = mnb.predict(user_input_transformed2)
user_pred3 = mnb.predict(user_input_transformed3)


print(f"Prediction with CountVectorizer (binary=False): {user_pred1[0]}")
print(f"Prediction with CountVectorizer (binary=True): {user_pred2[0]}")
print(f"Prediction with TfidfVectorizer: {user_pred3[0]}")